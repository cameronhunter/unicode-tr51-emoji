#!/usr/bin/env node

const mkdirp = require("mkdirp");
const pegjs = require("pegjs");
const fs = require("fs");
const path = require("path");
const opts = require("nomnom")
    .option("input", { required: true, abbr: "i", position: 0, metavar: "PATH", help: "Path to read from" })
    .option("outputDir", { required: true, full: "output-dir", abbr: "o", position: 1, metavar: "DIR", help: "Directory to output to" })
    .parse();

const output = (filename) => path.join(opts.outputDir, filename);
const input = (filename) => path.join(__dirname, filename);

mkdirp.sync(opts.outputDir);
console.info("Creating", opts.outputDir, "from", opts.input);

// Create output from emoji-data.txt files
const emojiData = parse(input("../parser/emoji-data"), path.join(opts.input, "emoji-data.txt")).then((parsed) => {
  return write(output("emoji-data.js"), parsed).then(() => parsed);
}).catch((error) => {
  console.error(error);
  process.exit(1);
});

// Create output from emoji(-zwj)?-sequences.txt files
const emojiSequences = ["emoji-sequences", "emoji-zwj-sequences"].map((file) => {
  return parse(input("../parser/emoji-sequences"), path.join(opts.input, `${file}.txt`)).then((parsed) => {
    return write(output(`${file}.js`), parsed).then(() => parsed);
  }).catch((error) => {
    console.error(error);
    return [];
  });
});

// Create index, symbols and codepoints output
Promise.all([emojiData, ...emojiSequences]).then(([data, sequences, zwjSequences]) => {
  const symbols = (array) => array.map(_ => _.symbol);
  const codepoints = (array) => array.map(_ => _.codepoints).map(c => c.length === 1 ? c[0] : c);
  return Promise.all([
    write(output("index.js"), [...data, ...sequences, ...zwjSequences]),
    write(output("symbols.js"), [...symbols(data), ...symbols(sequences), ...symbols(zwjSequences)]),
    write(output("code-points.js"), [...codepoints(data), ...codepoints(sequences), ...codepoints(zwjSequences)])
  ]);
}).catch((error) => {
  console.error(error);
  process.exit(1);
});

function parse(grammarPath, inputPath) {
  return Promise.all([require(grammarPath), read(inputPath)]).then(([parser, input]) => {
    return rescue(() => parser.parse(input));
  }).catch((error) => {
    return Promise.reject(`Couldn't parse input "${inputPath}" using grammar "${grammarPath}". Error: ${error}`);
  });
}

function buildParser(path) {
  return read(path).then((grammar) => {
    return rescue(() => pegjs.generate(grammar));
  }).catch((error) => {
    return Promise.reject(`Couldn't build parser "${path}". Error: ${error}`);
  });
}

function rescue(fn) {
  return new Promise((resolve, reject) => {
    try {
      resolve(fn());
    } catch(e) {
      reject(e);
    }
  });
}

function exists(path) {
  return new Promise((resolve, reject) => {
    fs.access(path, fs.F_OK, (error) => {
      error ? reject(`Couldn't find file "${path}". Error: ${error}`) : resolve(path);
    });
  });
}

function read(path) {
  return exists(path).then((path) => new Promise((resolve, reject) => {
    fs.readFile(path, "utf8", (error, data) => {
      error ? reject(`Couldn't read file "${path}". Error: ${error}`) : resolve(data);
    });
  }));
}

function write(path, data) {
  return new Promise((resolve, reject) => {
    fs.writeFile(path, `module.exports = ${JSON.stringify(data, null, 2)};\n`, (error) => {
      error ? reject(`Couldn't write to file "${path}". Error: ${error}`) : resolve(data);
    });
  });
}
