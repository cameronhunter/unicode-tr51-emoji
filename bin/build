#!/usr/bin/env node

const emojiDataParser = require("../parser/emoji-data");
const mkdirp = require("mkdirp");
const fs = require("fs");
const path = require("path");
const opts = require("nomnom")
    .option("input", { required: true, abbr: "i", position: 0, metavar: "PATH", help: "Path to read from" })
    .option("outputDir", { required: true, full: "output-dir", abbr: "o", position: 1, metavar: "DIR", help: "Directory to output to" })
    .parse();

read(opts.input).then((data) => {
  mkdirp.sync(opts.outputDir);

  console.info("Creating", opts.outputDir, "from", opts.input);

  const parsed = emojiDataParser.parse(data);

  module("index.js", parsed);
  module("symbols.js", parsed.map(_ => _.symbol));
  module("code-points.js", parsed.map(_ => _.codepoints).map(c => c.length === 1 ? c[0] : c));
}).catch((error) => {
  console.error(error);
  process.exit(1);
});

function read(path) {
  return new Promise((resolve, reject) => {
    fs.access(path, fs.F_OK, (error) => {
      error ? reject(`Couldn't find file "${path}". Error: ${error}`) : resolve(path);
    });
  }).then((path) => {
    return new Promise((resolve, reject) => {
      fs.readFile(path, "utf8", (error, data) => {
        error ? reject(`Couldn't read file "${path}". Error: ${error}`) : resolve(data);
      });
    });
  });
}

function module(file, obj) {
  fs.writeFileSync(path.join(opts.outputDir, file), "module.exports = " + JSON.stringify(obj, null, 2) + ";\n");
}
